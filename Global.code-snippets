{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// language identifiers: https://code.visualstudio.com/docs/languages/identifiers
	// location: cd ~/Library/Application\ Support/Code/User/snippets
	"Better HTML boilerplate": {
		"scope": "html",
		"prefix": "!!",
		"body": [
			"<!DOCTYPE html>",
			"<html lang=\"en-US\">",
			"<head>",
			"	<meta charset=\"UTF-8\">",
			"	<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">"
			"	<link rel=\"stylesheet\" href=\"/style.css\">"
			"	<script src=\"./script.js\"></script>"
			"	<title>Document</title>",
			"</head>",
			"<body>",
			"",
			"</body>",
			"</html>"
		]
	},
	"Outline element": {
		"scope": "css",
		"prefix": "b1b",
		"body": "border: 1px solid #000000;",
	},
	"RAM CSS Grid": {
		"scope": "css",
		"prefix": "ram",
		"body": "grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));"
	},
	"GitIgnore": {
		"prefix": "giti",
		"body": [
			"# Logs",
			"logs",
			"*.log",
			"npm-debug.log*",
			"yarn-debug.log*",
			"yarn-error.log*",
			"pnpm-debug.log*",
			"lerna-debug.log*",
			"",
			"node_modules",
			"dist",
			"dist-ssr",
			"# Might not need to remove package-lock.json due to small-ish size",
			"# package-lock.json",
			"*.local",
			"",
			"# Editor directories and files",
			".vscode/*",
			"!.vscode/extensions.json",
			".idea",
			".DS_Store",
			"*.suo",
			"*.ntvs*",
			"*.njsproj",
			"*.sln",
			"*.sw?",
		]
	},
	"Express Router Setup": {
		"scope": "javascript",
		"prefix": "erouter",
		"body": [
			"const { Router } = require('express');",
			"const controller = require('../controllers/controller');",
			"const router = Router();",
			"",
			"router.get('/', controller.indexActionGet);",
			"router.get('/new', controller.newActionGet);",
			"router.post('/new', controller.newActionPost);",
			"",
			"module.exports = router;",
		]
	},
	"Express EJS App": {
		"scope": "javascript",
		"prefix": "exapp",
		"body": [
			"// Folders: controllers routes views",
			"const express = require('express');",
			"const app = express();",
			"const router = require('./routes/router');",
			"",
			"app.set('view engine', 'ejs');",
			"app.use(express.urlencoded({ extended: true }));",
			"app.use('/', router);",
			"",
			"const PORT = process.env.PORT || 3000;",
			"app.listen(PORT, () => console.log(`Express app listening on port ${PORT}!`));",
			"",
		]
	},
	"Express Controller": {
		"scope": "javascript",
		"prefix": "excontroller",
		"body": [
			// need to add userStorage
			"const userStorage = [];",
			"const { body, validationResult } = require('express-validator');",
			"const validateUser = [",
			"body('firstName')",
			".trim()",
			".isAlpha()",
			".withMessage('Error with first name')",
			".isLength({ min: 1, max: 10 })",
			".withMessage('Error with first name length'),",
			"body('lastName')",
			".trim()",
			".isAlpha()",
			".withMessage('Error with last name')",
			".isLength({ min: 1, max: 10 })",
			".withMessage('Error with first last length'),",
			"body('email').trim().isEmail().withMessage('Error with email'),",
			"];",
			"",
			"exports.indexActionGet = (req, res) => {",
			"// renders views/index.ejs",
			"res.render('index', {",
			"title: 'Index Action',",
			"});",
			"};",
			"",
			"exports.newActionGet = (req, res) => {",
			"res.render('new', {",
			"title: 'New Page',",
			"});",
			"};",
			"",
			"exports.newActionPost = [",
			"validateUser,",
			"(req, res) => {",
			"const errors = validationResult(req);",
			"if (!errors.isEmpty()) {",
			"return res.status(400).render('createUser', {",
			"title: 'Create user',",
			"errors: errors.array(),",
			"});",
			"}",
			"",
			"const { firstName, lastName, email } = req.body;",
			"userStorage.push({ firstName, lastName, email });",
			"res.redirect('/');",
			"}",
			"];",
			"",
		],
	}
}