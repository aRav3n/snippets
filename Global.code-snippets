{
	// language identifiers: https://code.visualstudio.com/docs/languages/identifiers
	// cd ~/Library/Application\ Support/Code/User/snippets
	"Better HTML boilerplate": {
		"prefix": "!!",
		"body": [
			"<!DOCTYPE html>",
			"<html lang=\"en-US\">",
			"<head>",
			"  <meta charset=\"UTF-8\">",
			"  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">",
			"  <link rel=\"stylesheet\" href=\"/style.css\">",
			"  <script src=\"./script.js\"></script>",
			"  <title>Document</title>",
			"</head>",
			"<body>",
			"",
			"</body>",
			"</html>"
		],
		"description": "Better HTML boilerplate"
	},
	"Copyright HTML": {
		"prefix": "copyright",
		"body": [
			"&copy; $name $year"
		],
		"description": "Copyright HTML"
	},
	"Outline element": {
		"scope": "css",
		"prefix": "b1b",
		"body": "border: 1px solid #000000;",
	},
	"RAM CSS Grid": {
		"scope": "css",
		"prefix": "ram",
		"body": "grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));"
	},
	"GitIgnore": {
		"prefix": "gitignore",
		"body": [
			"# Logs",
			"logs",
			"*.log",
			"npm-debug.log*",
			"yarn-debug.log*",
			"yarn-error.log*",
			"pnpm-debug.log*",
			"lerna-debug.log*",
			"",
			"node_modules",
			".env",
			"dist",
			"dist-ssr",
			"# Might not need to remove package-lock.json due to small-ish size",
			"# package-lock.json",
			"*.local",
			"",
			"# Editor directories and files",
			".vscode/*",
			"!.vscode/extensions.json",
			".idea",
			".DS_Store",
			"*.suo",
			"*.ntvs*",
			"*.njsproj",
			"*.sln",
			"*.sw?",
			"",
			"# contents of uploads folder for nodeJS projects",
			"uploads/*"
		],
		"description": "GitIgnore"
	},
	"Express EJS App": {
		"prefix": "exejsapp",
		"body": [
			"// npm init -y",
			"// npm install express ejs express-validator",
			"",
			"// mkdir routes controllers views views/partials db public",
			"// touch routes/router.js controllers/controller.js",
			"",
			"// npm install dotenv pg",
			"",
			"//npm install passport passport-local bcryptjs express-session",
			"",
			"// npm install prisma typescript tsx @types/node --save-dev",
			"// npm install @prisma/client",
			"",
			"const express = require(\"express\");",
			"const app = express();",
			"const router = require(\"./routes/router\");",
			"const path = require(\"node:path\");",
			"const session = require(\"express-session\");",
			"const passport = require(\"passport\");",
			"require(\"./controllers/passportConfig\");",
			"",
			"app.set(\"view engine\", \"ejs\");",
			"const assetsPath = path.join(__dirname, \"public\");",
			"app.use(express.static(assetsPath));",
			"",
			"app.use(session({ secret: \"cats\", resave: false, saveUninitialized: false }));",
			"app.use(passport.session());",
			"app.use(express.urlencoded({ extended: false }));",
			"",
			"app.use(\"/\", router);",
			"",
			"const PORT = process.env.PORT || 3000;",
			"app.listen(PORT, () => console.log(`Express app listening on port ${PORT}!`));",
			""
		],
		"description": "Express EJS App"
	},
	"Express API App": {
		"prefix": "exapiapp",
		"body": [
			"const express = require(\"express\");",
			"const app = express();",
			"const router = require(\"./routes/router\");",
			"const cors = require(\"cors\");",
			"",
			"const allowList = [",
			"  \"http://localhost:5173/\"",
			"];",
			"const corsOptions = {",
			"  origin: allowList,",
			"  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],",
			"  allowedHeaders: [\"Content-Type\", \"Authorization\"],",
			"};",
			"",
			"app.use(cors(corsOptions));",
			"app.use(express.json());",
			"app.use(express.urlencoded({ extended: true }));",
			"",
			"app.use(\"/\", router);",
			"",
			"const PORT = process.env.PORT || 3000;",
			"app.listen(PORT, () => console.log(`Express app listening on port ${PORT}!`));"
		],
		"description": "Express API App"
	},
	"Express Router": {
		"prefix": "exrouter",
		"body": [
			"const { Router } = require(\"express\");",
			"const controller = require(\"../controllers/controller\");",
			"const router = Router();",
			"",
			"router.get(\"/\", controller.indexGet);",
			"",
			"router.use(\"*\", controller.errorGet);",
			"",
			"module.exports = router;",
			""
		],
		"description": "Express Router"
	},
	"Express Controller": {
		"prefix": "excontroller",
		"body": [
			"// const db = require(\"../db/queries\");",
			"const { body, validationResult } = require(\"express-validator\");",
			"const bcrypt = require(\"bcryptjs\");",
			"const passport = require(\"passport\");",
			"require(\"dotenv\").config();",
			"",
			"const alphaErr = \"must only contain letters\";",
			"const nameLengthErr = \"must be between 1 and 10 characters\";",
			"const emailErr = \"must be a valid email\";",
			"",
			"const validateUser = [",
			"  body(\"firstname\")",
			"    .trim()",
			"    .isAlpha()",
			"    .withMessage(`First name ${alphaErr}`)",
			"    .isLength({ min: 1, max: 10 })",
			"    .withMessage(`First name ${nameLengthErr}`),",
			"  body(\"lastname\")",
			"    .trim()",
			"    .isAlpha()",
			"    .withMessage(`Last name ${alphaErr}`)",
			"    .isLength({ min: 1, max: 10 })",
			"    .withMessage(`Last name ${nameLengthErr}`),",
			"  body(\"username\")",
			"    .trim()",
			"    .isLength({ min: 1, max: 10 })",
			"    .withMessage(`User name ${nameLengthErr}`),",
			"  body(\"email\").trim().isEmail().withMessage(`email ${emailErr}`),",
			"  body(\"password\")",
			"    .trim()",
			"    .isLength({ min: 6, max: 16 })",
			"    .withMessage(\"Password must be between 6 and 16 characters\"),",
			"  body(\"confirmPassword\")",
			"    .exists()",
			"    .custom((value, { req }) => {",
			"      if (value !== req.body.password) {",
			"        return false;",
			"      }",
			"      return true;",
			"    })",
			"    .withMessage(\"Passwords must match\")",
			"    .trim(),",
			"];",
			"",
			"const validatePost = [",
			"  body(\"title\")",
			"    .trim()",
			"    .isAlphanumeric()",
			"    .isLength({min: 1})",
			"    .withMessage(\"You need to have a title\"),",
			"  body(\"body\")",
			"    .trim()",
			"    .isAlphanumeric()",
			"];",
			"",
			"function formatDate() {",
			"  const date = new Date();",
			"",
			"  const formattedDate = date.toLocaleString(\"en-US\", {",
			"    month: \"2-digit\",",
			"    day: \"2-digit\",",
			"    year: \"numeric\",",
			"    hour: \"2-digit\",",
			"    minute: \"2-digit\",",
			"    hour12: true,",
			"  });",
			"",
			"  return formattedDate;",
			"}",
			"",
			"async function indexGet(req, res) {",
			"  console.log(\"user:\", req.user, \"session:\", req.session);",
			"  res.render(\"index\", {",
			"    title: \"Users\",",
			"  });",
			"}",
			"",
			"/*",
			"async function newActionGet(req, res) {",
			"  res.render(\"new\", {",
			"    title: \"New Page\",",
			"  });",
			"}",
			"",
			"newActionPost = [",
			"  validateUser,",
			"  async (req, res) => {",
			"    const errors = validationResult(req);",
			"    if (!errors.isEmpty()) {",
			"      return res.status(400).render(\"createUser\", {",
			"        title: \"Create user\",",
			"        errors: errors.array(),",
			"      });",
			"    }",
			"    const { userName } = req.body;",
			"    await db.insertUsername(userName);",
			"    res.redirect(\"/\");",
			"  },",
			"];",
			"",
			"async function searchActionGet(req, res) {",
			"  const { searchString } = req.query;",
			"  const searchResults = await db.searchUsers(searchString);",
			"  res.render(\"search\", {",
			"    title: \"Search Results\",",
			"    searchResults: searchResults,",
			"  });",
			"}",
			"*/",
			"",
			"module.exports = {",
			"  indexGet,",
			"};",
			""
		],
		"description": "Express Controller"
	},
	"Express Database Create Tables": {
		"prefix": "exdbtables",
		"body": [
			"const pool = require(\"./pool\");",
			"const verifyEnvVariablesOk = require(\"./verifyEnvVariables\");",
			"const query = require(\"./queries\");",
			"",
			"const SQL = `",
			"CREATE TABLE IF NOT EXISTS users (",
			"  id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,",
			"  firstname VARCHAR ( 255 ),",
			"  lastname VARCHAR ( 255 ),",
			"  username VARCHAR ( 255 ),",
			"  email VARCHAR ( 255 ),",
			"  hash VARCHAR ( 512 ),",
			"  member BOOLEAN DEFAULT TRUE,",
			"  added TIMESTAMP DEFAULT NOW()",
			");",
			"",
			"CREATE TABLE IF NOT EXISTS posts (",
			"  id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,",
			"  title VARCHAR ( 255 ),",
			"  timestamp TIMESTAMP DEFAULT NOW(),",
			"  body VARCHAR ( 512 ),",
			"  user_id INTEGER REFERENCES users(id)",
			");",
			"`;",
			"",
			"async function haveAtLeastOneUser() {",
			"  const users = await query.getAllUsers();",
			"  console.log(users);",
			"  if (users.length === 0) {",
			"    console.log(\"adding test user...\");",
			"    await query.addNewUser(\"First\", \"Last\", \"user\", \"a@b.com\", \"123\");",
			"    console.log(\"...user added\");",
			"  }",
			"}",
			"",
			"async function main() {",
			"  console.log(\"verifying env variables...\");",
			"  verifyEnvVariablesOk();",
			"  console.log(\"building tables...\");",
			"  await pool.query(SQL);",
			"  console.log(\"...tables built\");",
			"  haveAtLeastOneUser();",
			"}",
			"",
			"(async () => {",
			"  await main();",
			"})();",
			""
		],
		"description": "Express Database Create Tables"
	},
	"Express Database Pool": {
		"prefix": "exdbpool",
		"body": [
			"const { Pool } = require(\"pg\");",
			"require(\"dotenv\").config();",
			"",
			"module.exports = new Pool({",
			"  // connectionString: process.env.DATABASE_URL,",
			"  host: \"localhost\",",
			"  user: process.env.ROLE_NAME,",
			"  database: process.env.DATABASE_NAME,",
			"  password: process.env.ROLE_PASSWORD,",
			"  port: 5432,",
			"});",
			""
		],
		"description": "Express Database Pool"
	},
	"Express Database Queries": {
		"prefix": "exdbqueries",
		"body": [
			"const pool = require(\"./pool\");",
			"",
			"async function getMessageDetails(id) {",
			"  const { rows } = await pool.query(",
			"    \"SELECT text, being AS user, added, id FROM messages WHERE id = $1\",",
			"    [id]",
			"  );",
			"  return rows[0];",
			"}",
			"",
			"async function getMessages() {",
			"  const { rows } = await pool.query(",
			"    \"SELECT text, being AS user, added, id FROM messages\"",
			"  );",
			"  return rows;",
			"}",
			"",
			"async function submitNewMessage(name, messageText) {",
			"  await pool.query(\"INSERT INTO messages (text, being) VALUES ($1, $2)\", [",
			"    messageText,",
			"    name,",
			"  ]);",
			"}",
			"",
			"module.exports = {",
			"  getMessageDetails,",
			"  getMessages,",
			"  submitNewMessage,",
			"};",
			""
		],
		"description": "Express Database Query"
	},
	"EJS HTML": {
		"prefix": "!ejs",
		"body": [
			"<%- include(\"partials/head\") %>",
			"<body>",
			"  <%- include(\"partials/header\") %>",
			"",
			"  <%- include(\"partials/footer\") %>",
			"</body>",
			"</html>"
		],
		"description": "EJS HTML"
	},
	"EJS Errors": {
		"prefix": "!ejserrors",
		"body": [
			"<% if (locals.errors) { %>",
			"  <div class=\"errors\">",
			"    <h2>Please fix the following errors and sign up again:</h2>",
			"    <ul>",
			"      <% errors.forEach((error) => { %>",
			"      <li><%= error.msg %></li>",
			"      <% }); %>",
			"    </ul>",
			"  </div>",
			"<% } %>",
			""
		],
		"description": "EJS Errors"
	},
	"Express PassportConfig": {
		"prefix": "expassconfig",
		"body": [
			"const passport = require(\"passport\");",
			"const LocalStrategy = require(\"passport-local\").Strategy;",
			"const db = require(\"../db/queries\");",
			"const pool = require(\"../db/pool\");",
			"const bcrypt = require(\"bcryptjs\");",
			"",
			"passport.use(",
			"  new LocalStrategy(async (username, password, done) => {",
			"    try {",
			"      const { rows } = await pool.query(",
			"        \"SELECT * FROM users WHERE username = $1\",",
			"        [username]",
			"      );",
			"      const user = rows[0];",
			"",
			"      if (!user) {",
			"        return done(null, false, {",
			"          message: `User name ${username} not found`,",
			"        });",
			"      }",
			"      if (!bcrypt.compareSync(password, user.hash)) {",
			"        return done(null, false, { message: \"Password incorrect\" });",
			"      }",
			"      return done(null, user);",
			"    } catch (err) {",
			"      return done(err);",
			"    }",
			"  })",
			");",
			"",
			"passport.serializeUser((user, done) => {",
			"  console.log(\"serializing user with id of \", user.id);",
			"  done(null, user.id);",
			"});",
			"",
			"passport.deserializeUser(async (userId, done) => {",
			"  try {",
			"    const user = await db.findUserById(userId);",
			"    done(null, user);",
			"  } catch (err) {",
			"    done(err);",
			"  }",
			"});"
		],
		"description": "Express PassportConfig"
	},
	"Express Tsconfig": {
		"prefix": "extsc",
		"body": [
			"{",
			"  \"compilerOptions\": {",
			"    /* Visit https://aka.ms/tsconfig to read more about this file */",
			"",
			"    /* Projects */",
			"    // \"incremental\": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */",
			"    // \"composite\": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */",
			"    // \"tsBuildInfoFile\": \"./.tsbuildinfo\",              /* Specify the path to .tsbuildinfo incremental compilation file. */",
			"    // \"disableSourceOfProjectReferenceRedirect\": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */",
			"    // \"disableSolutionSearching\": true,                 /* Opt a project out of multi-project reference checking when editing. */",
			"    // \"disableReferencedProjectLoad\": true,             /* Reduce the number of projects loaded automatically by TypeScript. */",
			"",
			"    /* Language and Environment */",
			"    \"target\": \"es2016\" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,",
			"    // \"lib\": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */",
			"    // \"jsx\": \"preserve\",                                /* Specify what JSX code is generated. */",
			"    // \"libReplacement\": true,                           /* Enable lib replacement. */",
			"    // \"experimentalDecorators\": true,                   /* Enable experimental support for legacy experimental decorators. */",
			"    // \"emitDecoratorMetadata\": true,                    /* Emit design-type metadata for decorated declarations in source files. */",
			"    // \"jsxFactory\": \"\",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */",
			"    // \"jsxFragmentFactory\": \"\",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */",
			"    // \"jsxImportSource\": \"\",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */",
			"    // \"reactNamespace\": \"\",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */",
			"    // \"noLib\": true,                                    /* Disable including any library files, including the default lib.d.ts. */",
			"    // \"useDefineForClassFields\": true,                  /* Emit ECMAScript-standard-compliant class fields. */",
			"    // \"moduleDetection\": \"auto\",                        /* Control what method is used to detect module-format JS files. */",
			"",
			"    /* Modules */",
			"    \"module\": \"commonjs\" /* Specify what module code is generated. */,",
			"    \"rootDir\": \"./src\" /* Specify the root folder within your source files. */,",
			"    // \"moduleResolution\": \"node10\",                     /* Specify how TypeScript looks up a file from a given module specifier. */",
			"    // \"baseUrl\": \"./\",                                  /* Specify the base directory to resolve non-relative module names. */",
			"    // \"paths\": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */",
			"    // \"rootDirs\": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */",
			"    // \"typeRoots\": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */",
			"    // \"types\": [],                                      /* Specify type package names to be included without being referenced in a source file. */",
			"    // \"allowUmdGlobalAccess\": true,                     /* Allow accessing UMD globals from modules. */",
			"    // \"moduleSuffixes\": [],                             /* List of file name suffixes to search when resolving a module. */",
			"    // \"allowImportingTsExtensions\": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */",
			"    // \"rewriteRelativeImportExtensions\": true,          /* Rewrite '.ts', '.tsx', '.mts', and '.cts' file extensions in relative import paths to their JavaScript equivalent in output files. */",
			"    // \"resolvePackageJsonExports\": true,                /* Use the package.json 'exports' field when resolving package imports. */",
			"    // \"resolvePackageJsonImports\": true,                /* Use the package.json 'imports' field when resolving imports. */",
			"    // \"customConditions\": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */",
			"    // \"noUncheckedSideEffectImports\": true,             /* Check side effect imports. */",
			"    // \"resolveJsonModule\": true,                        /* Enable importing .json files. */",
			"    // \"allowArbitraryExtensions\": true,                 /* Enable importing files with any extension, provided a declaration file is present. */",
			"    // \"noResolve\": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */",
			"",
			"    /* JavaScript Support */",
			"    // \"allowJs\": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */",
			"    // \"checkJs\": true,                                  /* Enable error reporting in type-checked JavaScript files. */",
			"    // \"maxNodeModuleJsDepth\": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */",
			"",
			"    /* Emit */",
			"    // \"declaration\": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */",
			"    // \"declarationMap\": true,                           /* Create sourcemaps for d.ts files. */",
			"    // \"emitDeclarationOnly\": true,                      /* Only output d.ts files and not JavaScript files. */",
			"    // \"sourceMap\": true,                                /* Create source map files for emitted JavaScript files. */",
			"    // \"inlineSourceMap\": true,                          /* Include sourcemap files inside the emitted JavaScript. */",
			"    // \"noEmit\": true,                                   /* Disable emitting files from a compilation. */",
			"    // \"outFile\": \"./\",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */",
			"    \"outDir\": \"./db\" /* Specify an output folder for all emitted files. */,",
			"    // \"removeComments\": true,                           /* Disable emitting comments. */",
			"    // \"importHelpers\": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */",
			"    // \"downlevelIteration\": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */",
			"    // \"sourceRoot\": \"\",                                 /* Specify the root path for debuggers to find the reference source code. */",
			"    // \"mapRoot\": \"\",                                    /* Specify the location where debugger should locate map files instead of generated locations. */",
			"    // \"inlineSources\": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */",
			"    // \"emitBOM\": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */",
			"    // \"newLine\": \"crlf\",                                /* Set the newline character for emitting files. */",
			"    // \"stripInternal\": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */",
			"    // \"noEmitHelpers\": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */",
			"    // \"noEmitOnError\": true,                            /* Disable emitting files if any type checking errors are reported. */",
			"    // \"preserveConstEnums\": true,                       /* Disable erasing 'const enum' declarations in generated code. */",
			"    // \"declarationDir\": \"./\",                           /* Specify the output directory for generated declaration files. */",
			"",
			"    /* Interop Constraints */",
			"    // \"isolatedModules\": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */",
			"    // \"verbatimModuleSyntax\": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */",
			"    // \"isolatedDeclarations\": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */",
			"    // \"erasableSyntaxOnly\": true,                       /* Do not allow runtime constructs that are not part of ECMAScript. */",
			"    // \"allowSyntheticDefaultImports\": true,             /* Allow 'import x from y' when a module doesn't have a default export. */",
			"    \"esModuleInterop\": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,",
			"    // \"preserveSymlinks\": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */",
			"    \"forceConsistentCasingInFileNames\": true /* Ensure that casing is correct in imports. */,",
			"",
			"    /* Type Checking */",
			"    \"strict\": true /* Enable all strict type-checking options. */,",
			"    // \"noImplicitAny\": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */",
			"    // \"strictNullChecks\": true,                         /* When type checking, take into account 'null' and 'undefined'. */",
			"    // \"strictFunctionTypes\": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */",
			"    // \"strictBindCallApply\": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */",
			"    // \"strictPropertyInitialization\": true,             /* Check for class properties that are declared but not set in the constructor. */",
			"    // \"strictBuiltinIteratorReturn\": true,              /* Built-in iterators are instantiated with a 'TReturn' type of 'undefined' instead of 'any'. */",
			"    // \"noImplicitThis\": true,                           /* Enable error reporting when 'this' is given the type 'any'. */",
			"    // \"useUnknownInCatchVariables\": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */",
			"    // \"alwaysStrict\": true,                             /* Ensure 'use strict' is always emitted. */",
			"    // \"noUnusedLocals\": true,                           /* Enable error reporting when local variables aren't read. */",
			"    // \"noUnusedParameters\": true,                       /* Raise an error when a function parameter isn't read. */",
			"    // \"exactOptionalPropertyTypes\": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */",
			"    // \"noImplicitReturns\": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */",
			"    // \"noFallthroughCasesInSwitch\": true,               /* Enable error reporting for fallthrough cases in switch statements. */",
			"    // \"noUncheckedIndexedAccess\": true,                 /* Add 'undefined' to a type when accessed using an index. */",
			"    // \"noImplicitOverride\": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */",
			"    // \"noPropertyAccessFromIndexSignature\": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */",
			"    // \"allowUnusedLabels\": true,                        /* Disable error reporting for unused labels. */",
			"    // \"allowUnreachableCode\": true,                     /* Disable error reporting for unreachable code. */",
			"",
			"    /* Completeness */",
			"    // \"skipDefaultLibCheck\": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */",
			"    \"skipLibCheck\": true /* Skip type checking all .d.ts files. */",
			"  },",
			"  \"include\": [\"src/**/*\"]",
			"}",
			""
		],
		"description": "Express Tsconfig"
	},
	"Console.Log": {
		"scope": "javascript",
		"prefix": "col",
		"body": "console.log($1)"
	},
	"Prisma Queries": {
		"prefix": "prismaqueries",
		"body": [
			"import { PrismaClient, Prisma } from \"@prisma/client\";",
			"",
			"const prisma = new PrismaClient();",
			"",
			"async function main() {",
			"  // ... you will write your Prisma Client queries here",
			"}",
			"",
			"main()",
			"  .then(async () => {",
			"    await prisma.$disconnect();",
			"  })",
			"  .catch(async (e) => {",
			"    console.error(e);",
			"    await prisma.$disconnect();",
			"    process.exit(1);",
			"  });",
			""
		],
		"description": "Prisma Queries"
	},
}