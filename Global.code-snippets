{
	// language identifiers: https://code.visualstudio.com/docs/languages/identifiers
	// cd ~/Library/Application\ Support/Code/User/snippets
	"Better HTML boilerplate": {
		"scope": "html",
		"prefix": "!!",
		"body": [
			"<!DOCTYPE html>",
			"<html lang=\"en-US\">",
			"<head>",
			"	<meta charset=\"UTF-8\">",
			"	<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">"
			"	<link rel=\"stylesheet\" href=\"/style.css\">"
			"	<script src=\"./script.js\"></script>"
			"	<title>Document</title>",
			"</head>",
			"<body>",
			"",
			"</body>",
			"</html>"
		]
	},
	"Outline element": {
		"scope": "css",
		"prefix": "b1b",
		"body": "border: 1px solid #000000;",
	},
	"RAM CSS Grid": {
		"scope": "css",
		"prefix": "ram",
		"body": "grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));"
	},
	"GitIgnore": {
		"prefix": "giti",
		"body": [
			"# Logs",
			"logs",
			"*.log",
			"npm-debug.log*",
			"yarn-debug.log*",
			"yarn-error.log*",
			"pnpm-debug.log*",
			"lerna-debug.log*",
			"",
			"node_modules",
			".env",
			"dist",
			"dist-ssr",
			"# Might not need to remove package-lock.json due to small-ish size",
			"# package-lock.json",
			"*.local",
			"",
			"# Editor directories and files",
			".vscode/*",
			"!.vscode/extensions.json",
			".idea",
			".DS_Store",
			"*.suo",
			"*.ntvs*",
			"*.njsproj",
			"*.sln",
			"*.sw?",
		]
	},
	"Express Router": {
		"prefix": "exrouter",
		"body": [
			"const { Router } = require(\"express\");",
			"const controller = require(\"../controllers/controller\");",
			"const router = Router();",
			"",
			"router.get(\"/\", controller.indexActionGet);",
			"router.get(\"/new\", controller.newActionGet);",
			"router.post(\"/new\", controller.newActionPost);",
			"router.get(\"/search\", controller.searchActionGet);",
			"",
			"module.exports = router;",
			""
		],
		"description": "Express Router"
	},
	"Express EJS App": {
		"prefix": "exapp",
		"body": [
			"// Folders: controllers routes views db public",
			"",
			"// npm init -y",
			"// npm install express ejs express-validator",
			"",
			"// npm install dotenv pg bcryptjs",
			"",
			"// npm install prisma --save-dev",
			"",
			"const express = require(\"express\");",
			"const app = express();",
			"const router = require(\"./routes/router\");",
			"const path = require(\"node:path\");",
			"",
			"app.set(\"view engine\", \"ejs\");",
			"app.use(express.urlencoded({ extended: true }));",
			"app.use(\"/\", router);",
			"",
			"const assetsPath = path.join(__dirname, \"public\");",
			"app.use(express.static(assetsPath));",
			"",
			"const PORT = process.env.PORT || 3000;",
			"app.listen(PORT, () => console.log(`Express app listening on port PORT!`));",
			""
		],
		"description": "Express EJS App"
	},
	"Express Controller": {
		"prefix": "excontroller",
		"body": [
			"const db = require(\"../db/queries\");",
			"const { body, validationResult } = require(\"express-validator\");",
			"const validateUser = [",
			"  body(\"userName\")",
			"    .trim()",
			"    .isAlpha()",
			"    .withMessage(\"Username may only contain letters and numbers\")",
			"    .isLength({ min: 1, max: 10 })",
			"    .withMessage(\"Username must be between 1 and 10 characters\"),",
			"];",
			"",
			"async function indexActionGet(req, res) {",
			"  const usernames = await db.getAllUsernames();",
			"  // res.send(\"Usernames: \" + usernames.map((user) => user.username).join(\", \"));",
			"  res.render(\"index\", {",
			"    title: \"Users\",",
			"    usernames: usernames,",
			"  });",
			"}",
			"",
			"async function newActionGet(req, res) {",
			"  res.render(\"new\", {",
			"    title: \"New Page\",",
			"  });",
			"}",
			"",
			"newActionPost = [",
			"  validateUser,",
			"  async (req, res) => {",
			"    const errors = validationResult(req);",
			"    if (!errors.isEmpty()) {",
			"      return res.status(400).render(\"createUser\", {",
			"        title: \"Create user\",",
			"        errors: errors.array(),",
			"      });",
			"    }",
			"    const { userName } = req.body;",
			"    await db.insertUsername(userName);",
			"    res.redirect(\"/\");",
			"  },",
			"];",
			"",
			"async function searchActionGet(req, res) {",
			"  const { searchString } = req.query;",
			"  const searchResults = await db.searchUsers(searchString);",
			"  res.render(\"search\", {",
			"    title: \"Search Results\",",
			"    searchResults: searchResults,",
			"  });",
			"}",
			"",
			"module.exports = {",
			"  indexActionGet,",
			"  newActionGet,",
			"  newActionPost,",
			"  searchActionGet,",
			"};",
			""
		],
		"description": "Express Controller"
	},
	"Express Database Create Tables": {
		"prefix": "exdbtables",
		"body": [
			"const pool = require(\"./pool\");",
			"const verifyEnvVariablesOk = require(\"./verifyEnvVariables\");",
			"const query = require(\"./queries\");",
			"",
			"const SQL = `",
			"CREATE TABLE IF NOT EXISTS users (",
			"  id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,",
			"  firstname VARCHAR ( 255 ),",
			"  lastname VARCHAR ( 255 ),",
			"  username VARCHAR ( 255 ),",
			"  email VARCHAR ( 255 ),",
			"  hash VARCHAR ( 512 ),",
			"  member BOOLEAN DEFAULT TRUE,",
			"  added TIMESTAMP DEFAULT NOW()",
			");",
			"",
			"CREATE TABLE IF NOT EXISTS posts (",
			"  id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,",
			"  title VARCHAR ( 255 ),",
			"  timestamp TIMESTAMP DEFAULT NOW(),",
			"  body VARCHAR ( 512 ),",
			"  user_id INTEGER REFERENCES users(id)",
			");",
			"`;",
			"",
			"async function haveAtLeastOneUser() {",
			"  const users = await query.getAllUsers();",
			"  console.log(users);",
			"  if (users.length === 0) {",
			"    console.log(\"adding test user...\");",
			"    await query.addNewUser(\"First\", \"Last\", \"user\", \"a@b.com\", \"123\");",
			"    console.log(\"...user added\");",
			"  }",
			"}",
			"",
			"async function main() {",
			"  console.log(\"verifying env variables...\");",
			"  verifyEnvVariablesOk();",
			"  console.log(\"building tables...\");",
			"  await pool.query(SQL);",
			"  console.log(\"...tables built\");",
			"  haveAtLeastOneUser();",
			"}",
			"",
			"(async () => {",
			"  await main();",
			"})();",
			""
		],
		"description": "Express Database Create Tables"
	},
	"Express Database Pool": {
		"prefix": "exdbpool",
		"body": [
			"const { Pool } = require(\"pg\");",
			"require(\"dotenv\").config();",
			"",
			"module.exports = new Pool({",
			"  // connectionString: process.env.DATABASE_URL,",
			"  host: \"localhost\",",
			"  user: process.env.ROLE_NAME,",
			"  database: process.env.DATABASE_NAME,",
			"  password: process.env.ROLE_PASSWORD,",
			"  port: 5432,",
			"});",
			""
		],
		"description": "Express Database Pool"
	},
	"Express Database Queries": {
		"prefix": "exdbqueries",
		"body": [
			"const pool = require(\"./pool\");",
			"",
			"async function getMessageDetails(id) {",
			"  const { rows } = await pool.query(",
			"    \"SELECT text, being AS user, added, id FROM messages WHERE id = $1\",",
			"    [id]",
			"  );",
			"  return rows[0];",
			"}",
			"",
			"async function getMessages() {",
			"  const { rows } = await pool.query(",
			"    \"SELECT text, being AS user, added, id FROM messages\"",
			"  );",
			"  return rows;",
			"}",
			"",
			"async function submitNewMessage(name, messageText) {",
			"  await pool.query(\"INSERT INTO messages (text, being) VALUES ($1, $2)\", [",
			"    messageText,",
			"    name,",
			"  ]);",
			"}",
			"",
			"module.exports = {",
			"  getMessageDetails,",
			"  getMessages,",
			"  submitNewMessage,",
			"};",
			""
		],
		"description": "Express Database Query"
	},
	"Console.Log": {
		"scope": "javascript",
		"prefix": "col",
		"body": "console.log($1)"
	},
}